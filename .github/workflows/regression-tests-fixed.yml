name: 🧪 Regression Test Pipeline

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Browsers to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ALLURE_VERSION: '2.24.0'

jobs:
  test_matrix:
    name: 🎯 Test Matrix
    runs-on: ubuntu-latest
    outputs:
      browsers: ${{ steps.setup.outputs.browsers }}
      
    steps:
      - name: 🔧 Setup Test Matrix
        id: setup
        run: |
          BROWSERS="${{ github.event.inputs.browsers || 'all' }}"
          if [ "$BROWSERS" = "all" ]; then
            echo 'browsers=["chromium", "firefox", "webkit"]' >> $GITHUB_OUTPUT
          else
            BROWSER_ARRAY=$(echo $BROWSERS | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "browsers=$BROWSER_ARRAY" >> $GITHUB_OUTPUT
          fi

  regression_tests:
    name: 🧪 Regression Tests
    needs: test_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJson(needs.test_matrix.outputs.browsers) }}
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 🎭 Install Dependencies
        run: |
          pip install -r automation_framework/requirements.txt
          pip install allure-pytest pytest-html pytest-xdist
          npm install -g @executeautomation/playwright-mcp-server
          playwright install ${{ matrix.browser }}
      
      - name: 🔧 Configure Test Environment
        run: |
          cat > config.yaml << 'CONFIG_END'
          base_url: "https://www.saucedemo.com"
          browser:
            type: "${{ matrix.browser }}"
            headless: true
            viewport:
              width: 1920
              height: 1080
          timeouts:
            default: 30000
            navigation: 60000
          test_data:
            credentials:
              valid_users:
                - username: "standard_user"
                  password: "secret_sauce"
              invalid_users:
                - username: "locked_out_user"
                  password: "secret_sauce"
          reports:
            allure_results_dir: "allure-results"
            html_report_dir: "html-reports"
          CONFIG_END
          
          mkdir -p allure-results html-reports screenshots
      
      - name: 🧪 Run Regression Tests
        run: |
          cd automation_framework
          pytest \
            --browser=${{ matrix.browser }} \
            --alluredir=../allure-results \
            --html=../html-reports/report_${{ matrix.browser }}.html \
            --self-contained-html \
            -v \
            tests/ || TEST_EXIT_CODE=$?
          
          echo "TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}" >> $GITHUB_ENV
        continue-on-error: true
      
      - name: 📊 Generate Allure Report
        if: always()
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          chmod +x allure-${{ env.ALLURE_VERSION }}/bin/allure
          
          ./allure-${{ env.ALLURE_VERSION }}/bin/allure generate allure-results \
            --output allure-report-${{ matrix.browser }} \
            --clean
      
      - name: 📋 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            allure-results/
            allure-report-${{ matrix.browser }}/
            html-reports/
            screenshots/
          retention-days: 30

  deploy_reports:
    name: 📊 Deploy Allure Reports
    needs: [test_matrix, regression_tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 🔧 Setup Allure
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          chmod +x allure-${{ env.ALLURE_VERSION }}/bin/allure
      
      - name: 📊 Combine Allure Results
        run: |
          mkdir -p combined-allure-results
          
          find artifacts/ -name "allure-results" -type d | while read dir; do
            if [ -d "$dir" ] && [ "$(ls -A $dir)" ]; then
              cp -r "$dir"/* combined-allure-results/ 2>/dev/null || true
            fi
          done
          
          if [ "$(ls -A combined-allure-results)" ]; then
            ./allure-${{ env.ALLURE_VERSION }}/bin/allure generate combined-allure-results \
              --output allure-report \
              --clean
            
            cat > allure-report/index.html << 'HTML_END'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Test Results</title>
                <meta http-equiv="refresh" content="0; url=./index.html">
            </head>
            <body>
                <p>Redirecting to test results...</p>
            </body>
            </html>
          HTML_END
          else
            echo "No allure results found to combine"
            mkdir -p allure-report
            echo "<h1>No test results available</h1>" > allure-report/index.html
          fi
      
      - name: 📤 Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: regression-reports
      
      - name: 📋 Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-allure-report
          path: allure-report/
          retention-days: 30

  notify_results:
    name: 📢 Notify Test Results
    needs: [test_matrix, regression_tests, deploy_reports]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Collect Results
        id: results
        run: |
          if [[ "${{ needs.regression_tests.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.regression_tests.result }}" == "failure" ]]; then
            echo "status=❌ FAILURE" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ PARTIAL" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: 📋 Create Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY_END'
          # 🧪 Regression Test Pipeline Summary
          
          ## Results: ${{ steps.results.outputs.status }}
          
          **Configuration:**
          - **Browsers**: ${{ needs.test_matrix.outputs.browsers }}
          - **Trigger**: ${{ github.event_name }}
          
          **Pipeline Status:**
          - **Test Matrix**: ${{ needs.test_matrix.result }}
          - **Regression Tests**: ${{ needs.regression_tests.result }}
          - **Report Deployment**: ${{ needs.deploy_reports.result }}
          
          **Reports & Artifacts:**
          - 📊 [Allure Reports](${{ github.server_url }}/${{ github.repository }}/pages/regression-reports)
          - 📁 [Test Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *Automated regression testing with multi-browser support*
          SUMMARY_END
