name: 🧪 Regression Test Pipeline

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Browsers to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
          - chromium,firefox
          - chromium,webkit
          - firefox,webkit
      
      test_tags:
        description: 'Test tags to run'
        required: false
        default: 'regression'
        type: choice
        options:
          - all
          - smoke
          - regression
          - critical
          - integration
      
      parallel_workers:
        description: 'Number of parallel workers'
        required: false
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ALLURE_VERSION: '2.24.0'

jobs:
  test_matrix:
    name: 🎯 Test Matrix
    runs-on: ubuntu-latest
    outputs:
      browsers: ${{ steps.setup.outputs.browsers }}
      workers: ${{ steps.setup.outputs.workers }}
      
    steps:
      - name: 🔧 Setup Test Matrix
        id: setup
        run: |
          # Determine browsers to test
          BROWSERS="${{ github.event.inputs.browsers || 'all' }}"
          if [ "$BROWSERS" = "all" ]; then
            echo 'browsers=["chromium", "firefox", "webkit"]' >> $GITHUB_OUTPUT
          else
            # Convert comma-separated string to JSON array
            BROWSER_ARRAY=$(echo $BROWSERS | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "browsers=$BROWSER_ARRAY" >> $GITHUB_OUTPUT
          fi
          
          # Set parallel workers
          WORKERS="${{ github.event.inputs.parallel_workers || '2' }}"
          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          
          echo "Test configuration:"
          echo "Browsers: $BROWSER_ARRAY"
          echo "Workers: $WORKERS"

  regression_tests:
    name: 🧪 Regression Tests
    needs: test_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJson(needs.test_matrix.outputs.browsers) }}
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🎭 Install Dependencies
        run: |
          pip install -r automation_framework/requirements.txt
          pip install allure-pytest pytest-html pytest-xdist
          npm install -g @executeautomation/playwright-mcp-server
          playwright install ${{ matrix.browser }}
      
      - name: 🔧 Configure Test Environment
        run: |
          # Create dynamic config based on browser
          cat > config.yaml << EOF
          base_url: "https://www.saucedemo.com"
          browser:
            type: "${{ matrix.browser }}"
            headless: true
            viewport:
              width: 1920
              height: 1080
          timeouts:
            default: 30000
            navigation: 60000
          test_data:
            credentials:
              valid_users:
                - username: "standard_user"
                  password: "secret_sauce"
                - username: "performance_glitch_user" 
                  password: "secret_sauce"
              invalid_users:
                - username: "locked_out_user"
                  password: "secret_sauce"
          reports:
            allure_results_dir: "allure-results"
            html_report_dir: "html-reports"
          EOF
          
          # Create reports directories
          mkdir -p allure-results html-reports screenshots
      
      - name: 🧪 Run Regression Tests
        run: |
          cd automation_framework
          
          # Determine test tags
          TEST_TAGS="${{ github.event.inputs.test_tags || 'regression' }}"
          WORKERS="${{ needs.test_matrix.outputs.workers }}"
          
          if [ "$TEST_TAGS" = "all" ]; then
            TAG_FILTER=""
          else
            TAG_FILTER="-m $TEST_TAGS"
          fi
          
          # Run tests with pytest
          pytest \
            $TAG_FILTER \
            --browser=${{ matrix.browser }} \
            --workers=$WORKERS \
            --alluredir=../allure-results \
            --html=../html-reports/report_${{ matrix.browser }}.html \
            --self-contained-html \
            --capture=no \
            -v \
            --tb=short \
            --strict-markers \
            tests/ || TEST_EXIT_CODE=$?
          
          # Save test exit code for later reference
          echo "TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}" >> $GITHUB_ENV
        continue-on-error: true
      
      - name: 📊 Generate Allure Report
        if: always()
        run: |
          # Download and setup Allure
          wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          chmod +x allure-${{ env.ALLURE_VERSION }}/bin/allure
          
          # Generate Allure report
          ./allure-${{ env.ALLURE_VERSION }}/bin/allure generate allure-results \
            --output allure-report-${{ matrix.browser }} \
            --clean
          
          # Create a summary file
          echo "# Test Summary for ${{ matrix.browser }}" > test-summary-${{ matrix.browser }}.md
          echo "- **Browser**: ${{ matrix.browser }}" >> test-summary-${{ matrix.browser }}.md
          echo "- **Test Tags**: ${{ github.event.inputs.test_tags || 'regression' }}" >> test-summary-${{ matrix.browser }}.md
          echo "- **Workers**: ${{ needs.test_matrix.outputs.workers }}" >> test-summary-${{ matrix.browser }}.md
          echo "- **Exit Code**: ${TEST_EXIT_CODE:-0}" >> test-summary-${{ matrix.browser }}.md
          echo "- **Timestamp**: $(date)" >> test-summary-${{ matrix.browser }}.md
      
      - name: 📋 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            allure-results/
            allure-report-${{ matrix.browser }}/
            html-reports/
            screenshots/
            test-summary-${{ matrix.browser }}.md
          retention-days: 30
      
      - name: 🚨 Create Issue on Test Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const browser = '${{ matrix.browser }}';
            const testTags = '${{ github.event.inputs.test_tags || 'regression' }}';
            const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
            
            const issueBody = `
            # 🚨 Regression Test Failure - ${browser}
            
            **Test Execution Details:**
            - **Browser**: ${browser}
            - **Test Tags**: ${testTags}
            - **Workers**: ${{ needs.test_matrix.outputs.workers }}
            - **Workflow Run**: [View Details](${runUrl})
            - **Triggered By**: ${{ github.actor }}
            - **Timestamp**: ${new Date().toISOString()}
            
            **Failure Information:**
            - Test execution failed with exit code: ${process.env.TEST_EXIT_CODE}
            - Check the workflow artifacts for detailed logs and reports
            - Allure reports and screenshots are available in the artifacts
            
            **Next Steps:**
            1. Review the test logs in the workflow run
            2. Check Allure report for detailed test results
            3. Examine screenshots for visual validation failures
            4. Assign this issue to the appropriate team member
            
            **Artifacts:**
            - HTML Reports: Available in workflow artifacts
            - Allure Reports: Generated for detailed analysis
            - Screenshots: Captured for failed test cases
            
            ---
            *This issue was automatically created by the regression test pipeline.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Regression Test Failure - ${browser} Browser`,
              body: issueBody,
              labels: ['bug', 'regression-failure', `browser-${browser}`, 'automated-issue']
            });

  deploy_reports:
    name: 📊 Deploy Allure Reports
    needs: [test_matrix, regression_tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 🔧 Setup Allure
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          chmod +x allure-${{ env.ALLURE_VERSION }}/bin/allure
      
      - name: 📊 Combine Allure Results
        run: |
          mkdir -p combined-allure-results
          
          # Combine all allure-results from different browsers
          find artifacts/ -name "allure-results" -type d | while read dir; do
            if [ -d "$dir" ] && [ "$(ls -A $dir)" ]; then
              cp -r "$dir"/* combined-allure-results/ 2>/dev/null || true
            fi
          done
          
          # Generate combined report
          if [ "$(ls -A combined-allure-results)" ]; then
            ./allure-${{ env.ALLURE_VERSION }}/bin/allure generate combined-allure-results \
              --output allure-report \
              --clean
            
            # Create index.html for GitHub Pages
            cat > allure-report/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Test Results</title>
                <meta http-equiv="refresh" content="0; url=./index.html">
            </head>
            <body>
                <p>Redirecting to test results...</p>
            </body>
            </html>
            EOF
          else
            echo "No allure results found to combine"
            mkdir -p allure-report
            echo "<h1>No test results available</h1>" > allure-report/index.html
          fi
      
      - name: 📤 Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: regression-reports
      
      - name: 📋 Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-allure-report
          path: allure-report/
          retention-days: 30

  notify_results:
    name: 📢 Notify Test Results
    needs: [test_matrix, regression_tests, deploy_reports]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Collect Results
        id: results
        run: |
          # Determine overall status
          if [[ "${{ needs.regression_tests.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.regression_tests.result }}" == "failure" ]]; then
            echo "status=❌ FAILURE" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ PARTIAL" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi
          
          # Get test configuration
          echo "browsers=${{ needs.test_matrix.outputs.browsers }}" >> $GITHUB_OUTPUT
          echo "workers=${{ needs.test_matrix.outputs.workers }}" >> $GITHUB_OUTPUT
      
      - name: 💬 Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🧪 Regression Test Results",
              "attachments": [
                {
                  "color": "${{ steps.results.outputs.color }}",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "${{ steps.results.outputs.status }}",
                      "short": true
                    },
                    {
                      "title": "Browsers Tested",
                      "value": "${{ steps.results.outputs.browsers }}",
                      "short": true
                    },
                    {
                      "title": "Test Tags",
                      "value": "${{ github.event.inputs.test_tags || 'regression' }}",
                      "short": true
                    },
                    {
                      "title": "Parallel Workers",
                      "value": "${{ steps.results.outputs.workers }}",
                      "short": true
                    },
                    {
                      "title": "Triggered By",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Workflow Run",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Allure Report",
                      "url": "${{ github.server_url }}/${{ github.repository }}/pages"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: 📋 Create Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🧪 Regression Test Pipeline Summary
          
          ## Results: ${{ steps.results.outputs.status }}
          
          **Configuration:**
          - **Browsers**: ${{ steps.results.outputs.browsers }}
          - **Test Tags**: ${{ github.event.inputs.test_tags || 'regression' }}
          - **Parallel Workers**: ${{ steps.results.outputs.workers }}
          - **Trigger**: ${{ github.event_name }}
          
          **Pipeline Status:**
          - **Test Matrix**: ${{ needs.test_matrix.result }}
          - **Regression Tests**: ${{ needs.regression_tests.result }}
          - **Report Deployment**: ${{ needs.deploy_reports.result }}
          
          **Reports & Artifacts:**
          - 📊 [Allure Reports](${{ github.server_url }}/${{ github.repository }}/pages/regression-reports)
          - 📁 [Test Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - 🐛 Issues created for any test failures
          
          ---
          *Automated regression testing with multi-browser support*
          EOF
